{"version":3,"sources":["components/Functions.js","components/redux/actions/index.js","components/FormToSchedule.jsx","components/HeaderSchedule.jsx","components/Profile.jsx","components/HeaderLeft.jsx","components/Info.jsx","components/Schedule.jsx","services/FetchWorker.js","pages/HomePage.jsx","App.js","reportWebVitals.js","components/redux/reducers/addWorkReducer.js","components/redux/reducers/workerReducer.js","components/redux/reducers/index.js","components/redux/store/index.js","index.js"],"names":["calculateTime","date","data","Date","dataInit","tempCloseer","num","parseInt","toFixed","renderComponentsProfile","worker","timeInCloseerArray","created_at","split","timeInCloseer","map","c","i","push","className","src","picture","alt","first_name","last_name","width","height","viewBox","fill","xmlns","d","role","size","shoe","join","renderBaloon","e","baloon","document","querySelector","type","target","baseVal","innerText","clearBaloon","renderIcons","name","onMouseOver","onMouseOut","cx","cy","r","stroke","renderData","moment","day","getDate","mounth","getMonth","year","getFullYear","returnMounth","n","renderTime","hr","getHours","min","getMinutes","sec","getSeconds","renderDayWork","work","hour","minute","stringMounth","Number","icon","dataJob","compare","checkIcon","console","log","renderWorks","schedule","length","checkCoincidence","dateJob","arraySchedule","some","checkInputs","actions","REQUEST_INFO_WORKER","ADD_WORK","getInforWorkerAction","payload","addWorkAction","FormToSchedule","props","state","handleChange","bind","handleSubmit","this","setState","value","addWork","global","alert","htmlFor","onChange","placeholder","max","onClick","rx","x1","y1","x2","y2","Component","connect","dispatch","HeaderSchedule","Profile","workerData","HeaderLeft","clock","setInterval","setDate","mounthExtense","Info","Schedule","getWorkerInfo","a","fetch","response","json","HomePage","requestInfoWorker","getInfoWorker","info","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","addWorkReducer","action","workerReducer","rootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.90900e1c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction calculateTime(date) {\n  const data = new Date();\n  const dataInit = `${date}T00:00:00-03:00`;\n  const init = new Date(dataInit);\n  const tempCloseer = (data - init)/1000/60/60/24/365;\n  const num = tempCloseer - parseInt(tempCloseer);\n  return (num + parseInt(num * 10) / 10).toFixed(1);\n}\n\nexport function renderComponentsProfile(worker) {\n  const timeInCloseerArray = worker.created_at.split('');\n  let timeInCloseer = [];\n  timeInCloseerArray.map((c, i) => i < 10 && timeInCloseer.push(c));\n  return (\n    <div className=\"body-profile\">\n      <div className=\"image-name-role\">\n        <img src={ worker.picture } alt={`foto de ${worker.first_name}`} />\n        <span className=\"profile-name\">\n          {`${worker.first_name} ${worker.last_name} `} \n          <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M5.3106 0.098173C5.38577 0.123693 5.45921 0.154046 5.53043 0.18904L6.38743 0.610073C6.61999 0.72434 6.89256 0.72434 7.12512 0.610073L7.98212 0.18904C8.89237 -0.2582 9.99369 0.11564 10.4418 1.02403L10.4909 1.13225L10.5329 1.24341L10.8405 2.14581C10.9241 2.39072 11.1168 2.58305 11.3622 2.66637L12.2665 2.97334C13.2271 3.29942 13.7409 4.34085 13.4142 5.29942C13.3886 5.37443 13.3582 5.44772 13.3231 5.51879L12.9011 6.37399C12.7866 6.60605 12.7866 6.87805 12.9011 7.11012L13.3231 7.96532C13.7713 8.87365 13.3967 9.97265 12.4863 10.4199C12.4151 10.4549 12.3417 10.4853 12.2665 10.5107L11.3622 10.8177C11.1168 10.9011 10.9241 11.0934 10.8405 11.3383L10.5329 12.2407C10.2061 13.1993 9.16254 13.712 8.20192 13.3859C8.12676 13.3604 8.05334 13.3301 7.98212 13.2951L7.12512 12.874C6.89256 12.7597 6.61999 12.7597 6.38743 12.874L5.53043 13.2951C4.62013 13.7423 3.51885 13.3685 3.07067 12.4601C3.0356 12.389 3.00518 12.3157 2.97961 12.2407L2.67199 11.3383C2.5885 11.0934 2.39576 10.9011 2.15033 10.8177L1.24603 10.5107C0.285427 10.1847 -0.228388 9.14325 0.0983801 8.18465C0.123954 8.10965 0.154371 8.03639 0.189439 7.96532L0.61136 7.11012C0.725868 6.87805 0.725868 6.60605 0.61136 6.37399L0.189439 5.51879C-0.258745 4.61041 0.115884 3.51145 1.02619 3.06421C1.09742 3.02921 1.17086 2.99885 1.24603 2.97334L2.15033 2.66637C2.39576 2.58305 2.5885 2.39072 2.67199 2.14581L2.97961 1.24341C3.30638 0.284827 4.35 -0.227907 5.3106 0.098173ZM9.07429 4.72183L5.4538 8.33465L4.13486 6.75532C3.9577 6.54312 3.64176 6.51445 3.42917 6.69125C3.21658 6.86805 3.18786 7.18332 3.36502 7.39545L5.0352 9.39545C5.22382 9.62132 5.5661 9.63685 5.77441 9.42892L9.78285 5.42892C9.97853 5.23367 9.97853 4.91709 9.78285 4.72183C9.58717 4.52657 9.26997 4.52657 9.07429 4.72183Z\" fill=\"#02E2BD\"/>\n          </svg>\n        </span>\n        <span className=\"profile-role\">{ worker.role }</span>\n      </div>\n      <div className=\"physical-profile\">\n        <span>{`Altura: ${worker.height}`}</span>\n        <span>{`Manequim: ${worker.size}`}</span>\n        <span>{`Calçado: ${worker.shoe}`}</span>\n      </div>\n      <div className=\"time-closeer\">\n        <svg width=\"16\" height=\"15\" viewBox=\"0 0 16 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M7.56251 0C11.7393 0 15.125 3.17192 15.125 7.08333C15.125 10.9948 11.7393 14.1667 7.56251 14.1667C3.38574 14.1667 0 10.9948 0 7.08333C0 3.17192 3.38574 0 7.56251 0ZM7.56251 1.18079C4.08754 1.18079 1.26067 3.82854 1.26067 7.08333C1.26067 10.3381 4.08754 12.9859 7.56251 12.9859C11.0375 12.9859 13.8643 10.3381 13.8643 7.08333C13.8643 3.82854 11.0375 1.18079 7.56251 1.18079ZM6.99532 2.83333C7.28232 2.83333 7.51978 3.03332 7.55729 3.29252L7.56251 3.36458V7.08333H10.0203C10.3334 7.08333 10.5875 7.32133 10.5875 7.61458C10.5875 7.8834 10.374 8.10581 10.0972 8.14095L10.0203 8.14583H6.99532C6.70832 8.14583 6.47086 7.94587 6.43335 7.68662L6.42813 7.61458V3.36458C6.42813 3.07133 6.68223 2.83333 6.99532 2.83333Z\" fill=\"white\"/>\n        </svg>\n        <span>{`Tempo na Closeer: ${ calculateTime(timeInCloseer.join('')) } anos`}</span>\n      </div>\n    </div>\n  );\n}\n\nfunction renderBaloon(e) {\n  const baloon = document.querySelector('.clear');\n  const type = e.target.className.baseVal;\n  if (type === 'eli-5') {\n    baloon.innerText = 'Próximo do início';\n  }\n  if (type === 'eli-4') {\n    baloon.innerText = 'Já iniciou';\n  }\n  if (type === 'eli-3') {\n    baloon.innerText = 'Para o futuro';\n  }\n  return baloon.className = 'view';\n}\n\nfunction clearBaloon(e) {\n  const baloon = document.querySelector('.view');\n  baloon.className = 'clear';\n}\n\nexport function renderIcons() {\n  return (\n    <div>\n      <div>\n        <p className=\"clear\"></p>\n      </div>\n      <div className=\"icons\">\n        <svg name=\"yellow\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"eli-5\" onMouseOver={ (e) => renderBaloon(e) } onMouseOut={ (e) => clearBaloon(e) }>\n          <circle cx=\"7\" cy=\"7\" r=\"6.5\" fill=\"#ECC561\" stroke=\"#EFD89E\"/>\n        </svg>\n        <svg name=\"red\" width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"eli-4\" onMouseOver={ (e) => renderBaloon(e) } onMouseOut={ (e) => clearBaloon(e) }>\n          <circle cx=\"7\" cy=\"7\" r=\"6.5\" fill=\"#EB5F5F\" stroke=\"#FD7E7E\"/>\n        </svg>\n        <svg name=\"green \"width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"eli-3\" onMouseOver={ (e) => renderBaloon(e) } onMouseOut={ (e) => clearBaloon(e) }>\n          <circle cx=\"7\" cy=\"7\" r=\"6.5\" fill=\"#02E2BD\" stroke=\"#61F4D7\"/>\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport function renderData() {\n  const moment = new Date();\n  return {\n    day: moment.getDate(),\n    mounth: moment.getMonth() + 1,\n    year: moment.getFullYear(),\n  };\n}\n\nexport function returnMounth(n) {\n  if(n === 1) {\n    return 'Janeiro';\n  } else if (n === 2) {\n    return 'Fevereiro';\n  } else if (n === 3) {\n    return 'Março';\n  } else if (n === 4) {\n    return 'Abril';\n  } else if (n === 5) {\n    return 'Maio';\n  } else if (n === 6) {\n    return 'Junho';\n  } else if (n === 7) {\n    return 'Julho';\n  } else if (n === 8) {\n    return 'Agosto';\n  } else if (n === 9) {\n    return 'Setembro';\n  } else if (n === 10) {\n    return 'Outubro';\n  } else if (n === 11) {\n    return 'Novembro';\n  } else {\n    return 'Dezembro';\n  }\n}\n\nexport function renderTime() {\n  const data = new Date();\n  const  hr = data.getHours();\n  const min = data.getMinutes();\n  const sec = data.getSeconds();\n  const clock = `${hr}:${min > 9 ? min : `0${min}`}:${sec > 9 ? sec : `0${sec}`}`;\n  return clock;\n}\n\nfunction checkIcon(work) {\n  const { date, hour, minute } = work;\n  const dataJob = `${date}T${hour}:${minute}:00-03:00`;\n  const compare = (new Date() - new Date(dataJob))/ 1000 / 60 / 60;\n  if (compare >= 0) {\n    return (\n      <svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.2 7C14.2 10.5671 11.1564 13.5 7.35 13.5C3.54358 13.5 0.5 10.5671 0.5 7C0.5 3.43286 3.54358 0.5 7.35 0.5C11.1564 0.5 14.2 3.43286 14.2 7Z\" fill=\"#EB5F5F\" stroke=\"#FD7E7E\"/>\n      </svg>\n    );\n  } \n  if (0 > compare && compare > -12) {\n    return (\n      <svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.4239 7C14.4239 10.5602 11.3375 13.5 7.46193 13.5C3.58638 13.5 0.5 10.5602 0.5 7C0.5 3.43977 3.58638 0.5 7.46193 0.5C11.3375 0.5 14.4239 3.43977 14.4239 7Z\" fill=\"#ECC561\" stroke=\"#EFD89E\"/>\n    </svg>\n    );\n  } \n  if (compare <= -12) {\n    return (\n      <svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.2 7C14.2 10.5671 11.1564 13.5 7.35 13.5C3.54358 13.5 0.5 10.5671 0.5 7C0.5 3.43286 3.54358 0.5 7.35 0.5C11.1564 0.5 14.2 3.43286 14.2 7Z\" fill=\"#02E2BD\" stroke=\"#61F4D7\"/>\n      </svg>\n    );\n  }\n}\n\nfunction renderDayWork(work) {\n  const { date, hour, minute } = work;\n  const stringMounth = returnMounth(Number(date.split('-')[1])).split('');\n  const array = [stringMounth[0], stringMounth[1], stringMounth[2]]\n  const mounth = array.join('');\n  const day = date.split('-')[2];\n  const icon = checkIcon(work);\n  console.log(icon);\n  return (\n    <div className=\"date-job\">\n      <span className=\"icon-date\">{ icon }</span>\n      <span className=\"text-date\">{ ` ${day}/${mounth} das ${hour}h${minute} ás Xh` }</span>\n    </div>\n  );\n}\n\nexport function renderWorks(schedule) {\n  if (schedule !== '' && schedule.length > 0) {\n    return (\n      <div className=\"work-dates\">\n        { schedule.map((work) => {\n          return <div>{ renderDayWork(work) }</div>;\n        }) }\n      </div>\n    );\n  }\n}\n\n\nexport function checkCoincidence(dateJob, arraySchedule) {\n  const coincidenceTime = arraySchedule.some((schedule) => schedule.date === dateJob.date\n  && schedule.hour === dateJob.hour\n  && schedule.minute === dateJob.minute);\n  return coincidenceTime;\n}\n\nexport function checkInputs({ date, hour, minute }) {\n  if (date === '') {\n    return false;\n  }\n  if (hour === '' || hour < 1 || hour > 23) {\n    return false;\n  }\n  if (minute === '' || minute < 1 || minute > 59) {\n    return false;\n  }\n}\n","export const actions = {\n  REQUEST_INFO_WORKER: 'REQUEST_INFO_WORKER',\n  ADD_WORK: 'ADD_WORK',\n};\n\nexport const getInforWorkerAction = (payload) => ({\n  type: actions.REQUEST_INFO_WORKER, payload,\n});\n\nexport const addWorkAction = (payload) => ({\n  type: actions.ADD_WORK, payload,\n});","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { addWorkAction } from './redux/actions';\nimport './css/FormToSchedule.css';\nimport { checkCoincidence, checkInputs, renderData } from './Functions';\n\nclass FormToSchedule extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      date: '',\n      hour: '',\n      minute: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({ [target.name]: target.value });\n  }\n\n  handleSubmit({ date, hour, minute }) {\n    const { addWork, schedule } = this.props;\n    const { year } = renderData();\n    if (checkInputs({ date, hour, minute }) === false) {\n      return global.alert('Data, hora ou minuto com valor inválido!');\n    }\n    if (schedule !== '' && schedule.length > 0) {\n      const coincidence = checkCoincidence({ date, hour, minute }, schedule);\n      if (coincidence === true) {\n        return global.alert('Você já tem um job marcado nessa data e horário');\n      }\n    }\n    if (year !== Number(date.split('-')[0])) {\n      return global.alert('A agenda só aceita jobs no ano corrente!');\n    }\n    addWork({ date, hour, minute });\n    return this.setState({\n      date: '',\n      hour: '',\n      minute: '',\n    });\n  }\n\n  render() {\n    const { date, hour, minute } = this.state;\n    return (\n      <form className=\"body-form-schedule\">\n        <label htmlFor=\"date\">\n          <input\n            className=\"input-date\"\n            type=\"date\"\n            name=\"date\"\n            onChange={ (e) => this.handleChange(e) }\n            placeholder=\"Selecione uma data...\"\n            value={ date }\n          />  \n        </label>\n        <label htmlFor=\"hour\">\n          <input\n            className=\"input-hour\"\n            type=\"number\"\n            name=\"hour\"\n            onChange={ (e) => this.handleChange(e) }\n            placeholder=\"Hora\"\n            max=\"23\"\n            min=\"1\"\n            value={ hour }\n          />  \n        </label>\n        <label htmlFor=\"minute\">\n          <input\n            className=\"input-minute\"\n            type=\"number\"\n            name=\"minute\"\n            onChange={ (e) => this.handleChange(e) }\n            placeholder=\"Minuto\"\n            max=\"59\"\n            min=\"1\"\n            value={ minute }\n          />  \n        </label>\n        <svg \n          width=\"180\"\n          height=\"32\"\n          viewBox=\"0 0 180 32\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          onClick = { () => this.handleSubmit({ date, hour, minute }) }\n        >\n          <rect width=\"180\" height=\"32\" rx=\"6\" fill=\"#4A0D77\"/>\n          <path d=\"M88.6268 18.662H83.7548L82.7468 21H80.9268L85.4348 11.032H86.9048L91.4268 21H89.6208L88.6268 18.662ZM88.0248 17.262L86.1908 12.992L84.3568 17.262H88.0248ZM99.2108 13.93V20.776C99.2108 21.8773 98.9074 22.7127 98.3008 23.282C97.6941 23.8513 96.8028 24.136 95.6268 24.136C94.5348 24.136 93.5734 23.9073 92.7428 23.45L93.0228 22.12C93.8814 22.568 94.7354 22.792 95.5848 22.792C96.8448 22.792 97.4748 22.1667 97.4748 20.916V19.516C97.2601 19.8987 96.9474 20.2113 96.5368 20.454C96.1261 20.6873 95.6641 20.804 95.1508 20.804C94.5348 20.804 93.9841 20.6593 93.4988 20.37C93.0228 20.0713 92.6494 19.656 92.3788 19.124C92.1174 18.5827 91.9868 17.9667 91.9868 17.276C91.9868 16.5853 92.1174 15.974 92.3788 15.442C92.6494 14.9007 93.0228 14.4853 93.4988 14.196C93.9841 13.8973 94.5348 13.748 95.1508 13.748C95.6734 13.748 96.1354 13.86 96.5368 14.084C96.9474 14.2987 97.2601 14.602 97.4748 14.994V13.93H99.2108ZM95.6128 19.432C96.1914 19.432 96.6441 19.2407 96.9708 18.858C97.3068 18.4753 97.4748 17.948 97.4748 17.276C97.4748 16.604 97.3114 16.0767 96.9848 15.694C96.6581 15.3113 96.2008 15.12 95.6128 15.12C95.0341 15.12 94.5768 15.3113 94.2408 15.694C93.9141 16.0767 93.7508 16.604 93.7508 17.276C93.7508 17.948 93.9141 18.4753 94.2408 18.858C94.5768 19.2407 95.0341 19.432 95.6128 19.432ZM107.289 17.556H102.417C102.455 18.312 102.641 18.872 102.977 19.236C103.323 19.5907 103.831 19.768 104.503 19.768C105.278 19.768 105.997 19.516 106.659 19.012L107.163 20.216C106.827 20.4867 106.412 20.706 105.917 20.874C105.432 21.0327 104.937 21.112 104.433 21.112C103.276 21.112 102.366 20.7853 101.703 20.132C101.041 19.4787 100.709 18.5827 100.709 17.444C100.709 16.7253 100.854 16.086 101.143 15.526C101.433 14.966 101.839 14.532 102.361 14.224C102.884 13.9067 103.477 13.748 104.139 13.748C105.11 13.748 105.875 14.0653 106.435 14.7C107.005 15.3253 107.289 16.1887 107.289 17.29V17.556ZM104.181 15.008C103.715 15.008 103.332 15.148 103.033 15.428C102.744 15.6987 102.557 16.0953 102.473 16.618H105.763C105.707 16.086 105.544 15.6847 105.273 15.414C105.012 15.1433 104.648 15.008 104.181 15.008ZM112.817 13.748C114.507 13.748 115.351 14.7187 115.351 16.66V21H113.601V16.744C113.601 16.184 113.494 15.778 113.279 15.526C113.065 15.2647 112.733 15.134 112.285 15.134C111.753 15.134 111.324 15.3067 110.997 15.652C110.671 15.988 110.507 16.436 110.507 16.996V21H108.771V15.932C108.771 15.1853 108.734 14.518 108.659 13.93H110.297L110.423 15.092C110.666 14.6627 110.993 14.3313 111.403 14.098C111.823 13.8647 112.295 13.748 112.817 13.748ZM123.969 10.696V21H122.247V19.866C122.032 20.258 121.724 20.566 121.323 20.79C120.922 21.0047 120.464 21.112 119.951 21.112C119.344 21.112 118.803 20.958 118.327 20.65C117.851 20.342 117.478 19.908 117.207 19.348C116.946 18.7787 116.815 18.13 116.815 17.402C116.815 16.674 116.946 16.0347 117.207 15.484C117.468 14.9333 117.837 14.5087 118.313 14.21C118.789 13.902 119.335 13.748 119.951 13.748C120.455 13.748 120.903 13.8553 121.295 14.07C121.696 14.2753 122.004 14.5693 122.219 14.952V10.696H123.969ZM120.413 19.74C120.992 19.74 121.44 19.5393 121.757 19.138C122.084 18.7367 122.247 18.1673 122.247 17.43C122.247 16.6927 122.088 16.1233 121.771 15.722C121.454 15.3207 121.006 15.12 120.427 15.12C119.839 15.12 119.382 15.3207 119.055 15.722C118.738 16.114 118.579 16.674 118.579 17.402C118.579 18.1393 118.738 18.7133 119.055 19.124C119.382 19.5347 119.834 19.74 120.413 19.74ZM132.637 13.93V21H130.915V19.866C130.7 20.258 130.392 20.566 129.991 20.79C129.59 21.0047 129.132 21.112 128.619 21.112C128.003 21.112 127.457 20.9627 126.981 20.664C126.505 20.3653 126.136 19.9407 125.875 19.39C125.614 18.8393 125.483 18.2 125.483 17.472C125.483 16.744 125.614 16.1 125.875 15.54C126.146 14.9707 126.519 14.532 126.995 14.224C127.471 13.9067 128.012 13.748 128.619 13.748C129.132 13.748 129.59 13.86 129.991 14.084C130.392 14.2987 130.7 14.602 130.915 14.994V13.93H132.637ZM129.095 19.74C129.674 19.74 130.122 19.5393 130.439 19.138C130.756 18.7367 130.915 18.172 130.915 17.444C130.915 16.6973 130.756 16.1233 130.439 15.722C130.122 15.3207 129.669 15.12 129.081 15.12C128.502 15.12 128.05 15.33 127.723 15.75C127.406 16.1607 127.247 16.7347 127.247 17.472C127.247 18.2 127.406 18.76 127.723 19.152C128.05 19.544 128.507 19.74 129.095 19.74ZM138.351 13.762C138.621 13.762 138.855 13.7993 139.051 13.874L139.037 15.47C138.738 15.3487 138.43 15.288 138.113 15.288C137.515 15.288 137.058 15.4607 136.741 15.806C136.433 16.1513 136.279 16.6087 136.279 17.178V21H134.543V15.932C134.543 15.1853 134.505 14.518 134.431 13.93H136.069L136.209 15.176C136.386 14.7187 136.666 14.3687 137.049 14.126C137.431 13.8833 137.865 13.762 138.351 13.762Z\" fill=\"white\"/>\n          <line x1=\"51.5\" y1=\"4\" x2=\"51.5\" y2=\"28\" stroke=\"white\"/>\n          <path d=\"M32.25 10H21.75C20.9216 10 20.25 10.6716 20.25 11.5V22C20.25 22.8284 20.9216 23.5 21.75 23.5H32.25C33.0784 23.5 33.75 22.8284 33.75 22V11.5C33.75 10.6716 33.0784 10 32.25 10Z\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M30 8.5V11.5\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M24 8.5V11.5\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M20.25 14.5H33.75\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n        </svg>\n      </form>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addWork: (payload) => dispatch(addWorkAction(payload)),\n});\n\nconst mapStateToProps = ({ schedule: { schedule }}) => ({\n  schedule,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormToSchedule);\n","import React, { Component } from 'react';\nimport './css/HeaderSchedule.css';\n\nexport default class HeaderSchedule extends Component {\n  render() {\n    const { name } = this.props;\n    return (\n      <div className=\"body-HeaderSchedule\">\n        { name && <h1>Bem-vindo(a), { name }</h1> }\n        <span>Adicione seus jobs a agenda e gerencie sua rotina</span>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './css/Profile.css';\nimport { renderComponentsProfile } from './Functions';\n\nclass Profile extends Component {\n\n  render() {\n    const { worker } = this.props;\n    return (\n      <div>\n        { worker ? renderComponentsProfile(worker)\n        : <img src=\"https://i.gifer.com/ZZ5H.gif\" alt=\"loading\" width=\"50px\"/> }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ workerData: { worker }}) => ({\n  worker,\n});\n\nexport default connect(mapStateToProps, null)(Profile);","import React, { Component } from 'react'\nimport { renderData, renderTime, returnMounth } from './Functions';\nimport './css/HeaderLeft.css';\n\nexport default class HeaderLeft extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      day: '',\n      mounth: '',\n      year: '',\n      clock: '',\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => this.setDate(renderData()), 1000);\n  }\n\n  setDate({ day, mounth, year }) {\n    const mounthExtense = returnMounth(mounth)\n    this.setState({\n      day,\n      mounth: mounthExtense,\n      year,\n      clock: renderTime(),\n    });\n  }\n\n  render() {\n    const { day, mounth, year, clock } = this.state;\n    return (\n      <div className=\"body-HeaderLeft\">\n        { day && mounth && year && clock ?\n        <span>{`Hoje - ${day} de ${mounth} de ${year} - ${clock}`}</span> :\n        <img src=\"https://i.gifer.com/ZZ5H.gif\" alt=\"loading\" width=\"50px\"/> }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Profile from './Profile'\nimport './css/Info.css';\nimport HeaderLeft from './HeaderLeft';\n\nexport default class Info extends Component {\n  render() {\n    return (\n      <div className=\"body-info\">\n        <HeaderLeft />\n        <Profile />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './css/Schedule.css';\nimport { renderIcons, renderWorks } from './Functions';\n\nclass Schedule extends Component {\n  render() {\n    const { schedule } = this.props\n    return (\n      <div className=\"body-schedule\">\n        { renderIcons() }\n        { renderWorks(schedule) }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({ schedule: { schedule }}) => ({\n  schedule,\n});\n\nexport default connect(mapStateToProps, null)(Schedule);\n","export default async function getWorkerInfo() {\n  try {\n    const response = await fetch('http://localhost:3000/worker');\n    const data = await response.json();\n    return data;\n  }\n  catch {\n    return {\n      \"first_name\": \"Yuji\",\n      \"last_name\": \"Itadori\",\n      \"picture\": \"https://nacao42.com.br/wp-content/uploads/2020/12/yuji-Itadori.jpg\",\n      \"height\": \"173\",\n      \"size\": \"M\",\n      \"shoe\": \"37\",\n      \"role\": \"Exorcista Jujutsu\",\n      \"created_at\": \"2019-10-26T14:40:13.365Z\"\n    }\n  }\n}\n\n// fiz a requisição usando o json server para fazer a simulação de uma requisição ,sendo que o \n// link da \"API\" é o meu próprio localhost na porta 3000. Para que a aplicação continue funcionando\n// coloquei que o erro (catch) vai retornar o mesmo objeto que a requisição retornaria se não falhasse,\n// porém em uma aplicação real não ficaria dessa forma visto que nós teriamos uma API real.\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport FormToSchedule from '../components/FormToSchedule';\nimport HeaderSchedule from '../components/HeaderSchedule';\nimport Info from '../components/Info';\nimport { getInforWorkerAction } from '../components/redux/actions';\nimport Schedule from '../components/Schedule';\nimport getWorkerInfo from '../services/FetchWorker';\nimport './HomePage.css';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      worker: '',\n    }\n  }\n\n  componentDidMount() {\n    this.requestInfoWorker();\n  }\n\n  async requestInfoWorker() {\n    const { getInfoWorker } = this.props;\n    const info = await getWorkerInfo();\n    this.setState({ worker: info });\n    getInfoWorker(info);\n  }\n\n  render() {\n    const { worker } = this.state;\n    const { first_name: name } = worker;\n    return (\n      <div className=\"body-home-page\">\n        <svg width=\"103\" height=\"34\" viewBox=\"0 0 103 34\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"logo\">\n          <path d=\"M86.8556 25.0029C86.8556 25.0804 86.8221 25.1113 86.75 25.1139L86.4923 25.0984C86.5181 25.0589 86.5483 25.0225 86.5825 24.99C86.6366 24.9461 86.7036 24.9151 86.7577 24.8738C86.8118 24.8325 86.8376 24.7164 86.7448 24.6157C86.7161 24.5845 86.6801 24.5609 86.6401 24.5469C86.6001 24.533 86.5573 24.5291 86.5155 24.5357C86.5 24.5357 86.4794 24.5099 86.4562 24.4918L86.5077 24.3653C86.433 24.3214 86.415 24.4092 86.366 24.4144C86.317 24.4195 86.2243 24.4144 86.1521 24.4144C86.08 24.4144 85.9614 24.4144 85.9125 24.5228C85.8997 24.5548 85.8772 24.5819 85.8481 24.6002C85.719 24.6624 85.6153 24.7673 85.5543 24.8971C85.4925 25.0287 85.3301 25.052 85.2837 25.1888C85.0982 25.3333 84.9668 25.545 84.7477 25.6483C84.6769 25.6832 84.6184 25.7391 84.5802 25.8083C84.5382 25.8879 84.4808 25.9583 84.4114 26.0155C84.3419 26.0727 84.2618 26.1154 84.1757 26.1413C84.0726 26.1671 83.9927 26.2678 83.8974 26.3297C83.8175 26.5724 83.516 26.5879 83.4181 26.8253C83.2841 26.8434 83.2171 26.9725 83.0934 27.006C82.9871 27.0458 82.8923 27.1114 82.8177 27.1971C82.6502 27.3416 82.5033 27.5326 82.2508 27.5455C82.2095 27.5455 82.1735 27.592 82.1297 27.5997C82.0085 27.6204 81.9467 27.734 81.8488 27.783C81.7509 27.8321 81.6091 27.8605 81.5035 27.9173C81.3775 27.9933 81.2424 28.0531 81.1015 28.0954C80.9847 28.1359 80.877 28.199 80.7845 28.2812C80.6686 28.3716 80.5629 28.5213 80.3697 28.4593C80.3104 28.4413 80.2382 28.4877 80.1764 28.511C80.0638 28.5634 79.9485 28.6099 79.8311 28.6504C79.751 28.6601 79.6743 28.6885 79.6071 28.7333C79.54 28.7782 79.4843 28.8382 79.4446 28.9085C79.424 28.9446 79.3698 28.9575 79.3338 28.9833C79.1867 29.0684 79.029 29.1335 78.8648 29.177C78.8321 29.1885 78.7973 29.1924 78.7629 29.1884C78.7285 29.1844 78.6955 29.1725 78.6664 29.1537C78.652 29.1463 78.6361 29.1424 78.62 29.1424C78.6038 29.1424 78.5879 29.1463 78.5736 29.1537C78.3909 29.2393 78.1947 29.2926 77.9938 29.3112C77.7112 29.3772 77.447 29.506 77.2207 29.6881H77.1125C76.8757 29.6892 76.6432 29.7514 76.4374 29.8688C76.4093 29.9054 76.3713 29.9332 76.3279 29.9488C76.2845 29.9643 76.2375 29.967 76.1926 29.9565C75.9216 29.9464 75.6515 29.9921 75.3989 30.0907C75.2881 30.1166 75.1747 30.1269 75.0639 30.1424C74.5485 30.2276 74.0332 30.2508 73.5178 30.3515C73.4611 30.3515 73.4044 30.3515 73.3477 30.367C73.2119 30.3688 73.0768 30.3879 72.9457 30.4237C72.7087 30.5063 72.4432 30.4599 72.2242 30.6225C72.0536 30.6664 71.8736 30.6565 71.7088 30.5941C71.6834 30.5821 71.6557 30.5759 71.6277 30.5759C71.5996 30.5759 71.5719 30.5821 71.5465 30.5941C71.4666 30.6457 71.4073 30.6638 71.33 30.5941C71.2713 30.5564 71.2046 30.533 71.1352 30.5259C71.0659 30.5187 70.9958 30.5279 70.9306 30.5528L70.5286 30.6457C70.4752 30.6638 70.4172 30.6638 70.3637 30.6457C70.2589 30.5968 70.1444 30.5721 70.0287 30.5735C69.9482 30.5728 69.8679 30.5642 69.7891 30.5476C69.621 30.4907 69.4381 30.4962 69.2737 30.5631C69.2364 30.5798 69.196 30.5884 69.1552 30.5884C69.1143 30.5884 69.0739 30.5798 69.0366 30.5631C68.9851 30.5357 68.9306 30.514 68.8743 30.4986C68.7454 30.4986 68.6166 30.3928 68.4826 30.4986C68.4419 30.5263 68.392 30.5367 68.3436 30.5275C68.2953 30.5183 68.2526 30.4903 68.2249 30.4496C68.198 30.4178 68.1626 30.3944 68.1229 30.3821C68.0832 30.3697 68.0409 30.369 68.0007 30.3799C67.7109 30.4103 67.4179 30.3804 67.1401 30.2921C67.02 30.2463 66.8922 30.2244 66.7638 30.2276C66.5753 30.2469 66.3856 30.2024 66.2253 30.1011C66.2116 30.0904 66.1957 30.0829 66.1787 30.0793C66.1617 30.0758 66.1442 30.0761 66.1274 30.0804C66.0477 30.1031 65.964 30.1069 65.8826 30.0917C65.8012 30.0765 65.7245 30.0426 65.6584 29.9927C65.4513 29.8778 65.2173 29.8207 64.9807 29.8275C64.8718 29.8325 64.7632 29.8118 64.6638 29.7669C64.5644 29.7221 64.477 29.6544 64.4086 29.5693C64.2604 29.4125 64.068 29.3045 63.8572 29.2596C63.7999 29.2475 63.7438 29.2302 63.6897 29.2079C63.4114 29.1047 63.1434 28.9808 62.8676 28.8724C62.6928 28.8361 62.5277 28.7631 62.3832 28.6581C62.3246 28.6168 62.2537 28.5967 62.1822 28.6013C62.0843 28.6013 61.9941 28.6013 61.9503 28.4903C61.9503 28.4645 61.891 28.4413 61.8601 28.4438C61.7754 28.4474 61.691 28.4329 61.6124 28.4013C61.5337 28.3697 61.4627 28.3218 61.404 28.2606C61.4478 28.0773 61.4401 28.0515 61.3293 27.9869L60.9505 27.7856C60.8163 27.6856 60.6688 27.6048 60.5124 27.5455C60.484 27.5455 60.466 27.4939 60.4402 27.4681C60.2964 27.293 60.115 27.1527 59.9094 27.0577C59.8373 27.0861 59.7703 27.1145 59.7007 27.1351C59.6894 27.1362 59.6781 27.1343 59.6677 27.1298C59.6574 27.1253 59.6483 27.1183 59.6414 27.1093C59.6183 27.0806 59.6048 27.0454 59.6028 27.0086C59.6125 26.9366 59.5952 26.8634 59.5543 26.8034C59.5133 26.7433 59.4517 26.7006 59.3811 26.6834C59.2393 26.5893 59.1139 26.4724 59.0101 26.3375C58.9843 26.2966 58.9491 26.2625 58.9074 26.2383C58.8656 26.214 58.8186 26.2002 58.7704 26.1981C58.7031 26.1957 58.638 26.1736 58.5831 26.1347C58.5281 26.0957 58.4858 26.0415 58.4612 25.9787C58.3903 25.81 58.2639 25.6706 58.103 25.5837C57.977 25.4946 57.8558 25.3989 57.7397 25.2972C57.5825 25.1836 57.4227 25.07 57.2784 24.9435C57.1105 24.7839 56.9554 24.6113 56.8146 24.4273C56.5868 24.1538 56.3086 23.9268 55.9952 23.7587C55.8188 23.6695 55.6522 23.5622 55.4978 23.4386C55.4765 23.4287 55.454 23.4218 55.4308 23.418C55.4409 23.4551 55.4538 23.4913 55.4695 23.5264C55.5056 23.5909 55.5519 23.6503 55.588 23.7148C55.6291 23.7911 55.6661 23.8695 55.6988 23.9497C55.6988 23.9497 55.6988 23.9988 55.6705 24.0091C55.6481 24.0179 55.6233 24.0179 55.6009 24.0091C55.5789 23.9971 55.5617 23.978 55.5519 23.9549C55.5128 23.8826 55.4584 23.8198 55.3925 23.7707C55.3267 23.7217 55.2509 23.6876 55.1706 23.6709C55.1534 23.7485 55.1634 23.8296 55.1989 23.9007C55.2054 23.9365 55.2054 23.9732 55.1989 24.0091C55.1989 24.0091 55.1834 24.0297 55.1731 24.0349C55.1628 24.0401 55.1422 24.0349 55.1371 24.0349C55.0984 23.9704 55.0675 23.9033 55.0237 23.8413C55.0237 23.8207 54.9696 23.8207 54.918 23.8026L55.0185 24.1175C55.0853 24.2831 55.0853 24.4682 55.0185 24.6338C55.0109 24.6695 55.0109 24.7065 55.0185 24.7422C55.0778 24.7783 55.1499 24.7964 55.1809 24.8429C55.2178 24.9118 55.2414 24.9871 55.2504 25.0649C55.2619 25.1019 55.2619 25.1415 55.2504 25.1784C55.2388 25.2085 55.2348 25.241 55.2388 25.273C55.2429 25.305 55.2548 25.3355 55.2736 25.3617C55.3303 25.465 55.3793 25.5734 55.4463 25.6715C55.7289 26.1083 56.0414 26.5249 56.3817 26.9183C56.7837 27.4036 57.2166 27.8579 57.6443 28.3251C57.8995 28.6039 58.1705 28.8676 58.4561 29.115C58.7718 29.4144 59.1172 29.6807 59.4868 29.9101C59.6131 29.9849 59.7445 30.0701 59.8579 30.1682C60.2186 30.4263 60.6026 30.6354 60.9814 30.8522C61.3687 31.0566 61.767 31.2393 62.1745 31.3995C62.36 31.4769 62.543 31.5621 62.7259 31.6576C63.0274 31.8022 63.3547 31.8899 63.6433 32.0629C63.7028 32.0945 63.766 32.1188 63.8314 32.1352C64.2823 32.2642 64.7281 32.4088 65.1817 32.5146C65.4806 32.5714 65.7614 32.6979 66.0655 32.7315C66.3152 32.7642 66.5617 32.8177 66.8025 32.8915C67.2457 32.8915 67.6606 33.0412 68.0909 33.0877L69.1217 33.2168C69.467 33.2581 69.8174 33.271 70.1653 33.2968L70.5982 33.3252C70.9895 33.351 71.382 33.351 71.7733 33.3252C72.2542 33.3131 72.7337 33.2682 73.2086 33.1909C73.2339 33.1845 73.2605 33.1845 73.2859 33.1909C73.4791 33.2233 73.677 33.2127 73.8657 33.16C74.1749 33.1264 74.4893 33.16 74.7985 33.1032C74.9496 33.0634 75.1027 33.0315 75.2572 33.0077C75.6437 32.9483 76.0302 32.8967 76.4116 32.8089C76.793 32.7211 77.1847 32.6592 77.5557 32.5508C77.8624 32.4656 78.1664 32.3778 78.4679 32.2746C78.7673 32.1642 79.0727 32.0711 79.3827 31.9958C79.6458 31.927 79.9041 31.8408 80.1558 31.7376C80.4135 31.637 80.6712 31.5337 80.9108 31.4201L81.6478 31.1001L82.3693 30.7516C82.5316 30.669 82.712 30.6199 82.8692 30.5296L83.7711 30.0133L84.6421 29.4454C84.99 29.2131 85.3069 28.9291 85.66 28.7123C86.0393 28.4789 86.386 28.1959 86.6907 27.8708C86.7067 27.8496 86.7268 27.8321 86.75 27.8192C86.9348 27.6972 87.1022 27.5504 87.2473 27.3829C87.2735 27.3546 87.3029 27.3295 87.3349 27.3081C87.5859 27.1404 87.8071 26.9319 87.9894 26.6911C88.1404 26.5471 88.2567 26.3705 88.3296 26.1748C88.342 26.1389 88.3397 26.0995 88.3233 26.0652C88.3069 26.0309 88.2777 26.0044 88.242 25.9916C88.1836 25.9706 88.1231 25.9559 88.0616 25.9477C88.0175 25.9433 87.9748 25.9298 87.9362 25.908C87.8976 25.8863 87.864 25.8567 87.8374 25.8212C87.8554 25.7154 87.8812 25.6044 87.8941 25.496C87.8971 25.4684 87.8894 25.4407 87.8726 25.4186C87.8558 25.3965 87.8312 25.3817 87.8039 25.3772C87.7577 25.4299 87.7068 25.4783 87.6519 25.5218C87.5849 25.5734 87.4972 25.6018 87.4277 25.6508C87.3318 25.7092 87.245 25.7814 87.17 25.8651C86.8138 26.2813 86.4289 26.6721 86.0181 27.0344C85.8648 27.1597 85.7233 27.2988 85.5955 27.45C85.4169 27.5385 85.252 27.6524 85.1059 27.7882C84.9285 27.9303 84.7326 28.0475 84.5236 28.1367C84.4901 28.1367 84.4669 28.1831 84.4385 28.2064C84.1704 28.4661 83.8613 28.6798 83.5237 28.8388C83.4905 28.8555 83.4601 28.8773 83.4335 28.9033C83.1279 29.1592 82.7788 29.3577 82.4028 29.4893C82.3207 29.5159 82.2458 29.5609 82.1838 29.6209C82.1153 29.6741 82.033 29.7063 81.9467 29.7139C81.8631 29.7333 81.7819 29.7619 81.7045 29.7991C81.6375 29.8275 81.573 29.8688 81.5086 29.9023C81.0551 30.132 80.581 30.3153 80.1171 30.5141C80.0813 30.5245 80.048 30.5421 80.0192 30.5657C79.9136 30.6586 79.7615 30.6535 79.6533 30.7309C79.5249 30.8008 79.3788 30.8313 79.2333 30.8187C79.1738 30.8313 79.116 30.8504 79.0606 30.8755C78.9575 30.9142 78.857 30.9607 78.7514 30.9968C78.427 31.1146 78.0967 31.2154 77.7619 31.2988C77.4238 31.4126 77.0797 31.5074 76.7311 31.5828C76.6695 31.5918 76.6091 31.6074 76.5508 31.6292C76.1852 31.7467 75.8088 31.8271 75.4272 31.8693L74.7289 31.9725C74.4944 32.0009 74.2599 32.0164 74.0254 32.0397C73.951 32.0374 73.8768 32.0487 73.8064 32.0732C73.6621 32.1403 73.5049 32.0732 73.3658 32.1171C73.2103 32.1596 73.0502 32.183 72.889 32.1868C72.8272 32.1868 72.7654 32.1868 72.7061 32.1868C72.5927 32.1868 72.4819 32.1868 72.3711 32.2049C72.0593 32.2462 71.7501 32.2358 71.4383 32.2642C71.1159 32.3081 70.7891 32.3081 70.4668 32.2642C70.442 32.2616 70.4169 32.2616 70.3921 32.2642C69.9536 32.2682 69.5157 32.2345 69.083 32.1636C68.9464 32.1403 68.8073 32.1248 68.6707 32.1119C68.143 32.0754 67.6186 32.0013 67.1014 31.8899C66.8437 31.8409 66.6015 31.7996 66.3541 31.7454C66.1067 31.6912 65.8568 31.6473 65.612 31.5828C65.411 31.5363 65.2152 31.4847 65.0193 31.433C64.8235 31.3814 64.6251 31.3272 64.4292 31.2653C64.0607 31.1568 63.718 30.9839 63.3598 30.8497C63.0841 30.7438 62.8058 30.6457 62.5378 30.5218C62.346 30.45 62.16 30.3637 61.9812 30.2637C61.8044 30.159 61.6211 30.0659 61.4323 29.9849C61.2672 29.9166 61.1154 29.8196 60.984 29.6984L61.2416 29.7939C61.3296 29.8248 61.4157 29.861 61.4993 29.9023C61.9142 30.132 62.3729 30.274 62.7878 30.5089C62.8903 30.5627 62.9972 30.6076 63.1073 30.6432C63.6716 30.8548 64.2231 31.082 64.8029 31.242C64.9729 31.2937 65.143 31.3427 65.3182 31.3866C65.8104 31.5053 66.3129 31.5724 66.8025 31.686C67.287 31.7583 67.7637 31.877 68.2481 31.9442L69.2789 32.0758C69.619 32.1171 69.9643 32.1248 70.3096 32.1507H70.3508C70.6497 32.1352 70.9487 32.1507 71.2476 32.1507C71.2965 32.1507 71.3481 32.1507 71.397 32.1507C71.7681 32.13 72.1392 32.1171 72.5077 32.0629C72.6051 32.0492 72.7031 32.0406 72.8014 32.0371C73.4054 32.0231 74.0079 31.9705 74.6052 31.8796C75.2211 31.7557 75.8447 31.6834 76.4554 31.5311C76.5379 31.5131 76.6203 31.4847 76.7131 31.4614C76.878 31.4201 77.0404 31.3556 77.2053 31.3091C77.633 31.1956 78.0608 31.0923 78.4782 30.9478L79.1122 30.718L79.7306 30.4805C80.2305 30.305 80.6969 30.0572 81.1943 29.8765C81.5756 29.7035 81.9673 29.5332 82.3229 29.3318C82.6785 29.1305 83.0573 28.9266 83.4026 28.6891L83.8613 28.3793C84.0288 28.2735 84.1886 28.1599 84.3483 28.0412C84.503 27.9414 84.6488 27.8282 84.7838 27.703C84.9255 27.5559 85.1085 27.4836 85.2477 27.3494L85.3043 27.3003L85.7991 26.8847L86.2758 26.4485C86.613 26.1447 86.9322 25.8215 87.2318 25.4805C87.2443 25.46 87.2522 25.4371 87.255 25.4133L86.969 25.3746C86.8143 25.4488 86.6799 25.5596 86.5773 25.6973C86.4951 25.8025 86.4037 25.9001 86.3042 25.989C86.0465 26.2239 85.8017 26.464 85.5311 26.6937L84.7323 27.3623C84.3303 27.654 83.9592 27.9792 83.5263 28.2425L82.962 28.6065L82.3745 28.9369C82.2453 29.0254 82.1071 29.0998 81.9622 29.1589C81.7448 29.2269 81.5336 29.3133 81.3308 29.417C80.6532 29.7581 79.9523 30.0505 79.2333 30.2921C78.8931 30.4108 78.5375 30.4883 78.2025 30.607C77.7825 30.7567 77.3393 30.8238 76.9141 30.9994C76.7463 31.0589 76.5739 31.1047 76.3987 31.1362C76.0508 31.2085 75.703 31.2911 75.3499 31.335C74.9969 31.3788 74.6465 31.4563 74.2909 31.4847L73.5333 31.575C73.2756 31.6034 73.0179 31.6137 72.7731 31.6318C72.6266 31.6384 72.4813 31.6618 72.3402 31.7015C72.2581 31.7328 72.1694 31.7426 72.0825 31.7299C71.997 31.7178 71.9103 31.7178 71.8248 31.7299C71.7526 31.7299 71.6805 31.7557 71.6083 31.7531C71.2192 31.7325 70.8353 31.7531 70.4359 31.7531C69.8978 31.7423 69.3608 31.6992 68.8279 31.6241C68.5522 31.5879 68.2739 31.5673 68.0033 31.5182L67.1839 31.3685C67.122 31.3685 67.0602 31.3479 67.0009 31.3401C66.6092 31.2833 66.2279 31.2085 65.831 31.1233C65.4636 31.0531 65.1037 30.9476 64.7565 30.8084C64.7003 30.7814 64.6403 30.7631 64.5787 30.7542C64.3674 30.7219 64.1633 30.6529 63.9757 30.5502C63.7659 30.4858 63.5688 30.3854 63.3933 30.2534C63.1794 30.1837 62.9733 30.0959 62.7671 29.9952C62.6409 29.941 62.5095 29.8894 62.3883 29.83L61.9348 29.6003C61.7893 29.5122 61.6378 29.4345 61.4813 29.368C61.2888 29.2739 61.1029 29.1669 60.9247 29.0479C60.8813 29.0223 60.8428 28.9891 60.8113 28.9498C60.8015 28.9347 60.7951 28.9176 60.7924 28.8998C60.7898 28.882 60.7909 28.8639 60.7958 28.8465C60.7958 28.8259 60.8551 28.8259 60.8886 28.8181C60.9007 28.821 60.9121 28.8263 60.9221 28.8336C61.1798 28.9937 61.4736 29.1227 61.7493 29.2596C62.1667 29.4815 62.6048 29.6622 63.0377 29.8636C63.3638 30.0111 63.6996 30.1362 64.0427 30.2379C64.2231 30.2869 64.3906 30.3489 64.5581 30.4083C64.6843 30.4521 64.8157 30.4754 64.9497 30.5089L65.3053 30.6019C65.4007 30.6277 65.4909 30.6638 65.5862 30.6845C65.9695 30.7601 66.3467 30.8636 66.7149 30.9942C66.8071 31.0234 66.9009 31.0476 66.9958 31.0665C67.1014 31.0897 67.2148 31.051 67.3101 31.1336C67.4055 31.2162 67.4931 31.1181 67.5859 31.1026C67.6344 31.0977 67.6832 31.1086 67.725 31.1336C67.7972 31.1749 67.8642 31.2265 67.9286 31.2704C68.1296 31.2007 68.1296 31.2059 68.2507 31.2265L68.8253 31.304C68.9702 31.3081 69.1135 31.3342 69.2505 31.3814C69.3914 31.4507 69.5473 31.4835 69.704 31.4769C69.859 31.5066 70.0181 31.5066 70.173 31.4769C70.2204 31.4654 70.2699 31.4654 70.3173 31.4769C70.7708 31.5499 71.2323 31.5586 71.6882 31.5027C71.7963 31.4937 71.9049 31.4937 72.0129 31.5027C72.0972 31.525 72.1836 31.5379 72.2706 31.5415C72.3505 31.5415 72.4226 31.464 72.5025 31.4511C72.6537 31.4112 72.8126 31.4112 72.9638 31.4511C73.032 31.4729 73.1034 31.4834 73.1751 31.4821C73.6209 31.4821 74.0641 31.4072 74.5073 31.3634C74.9505 31.3195 75.3345 31.2136 75.7468 31.1336L76.4786 30.9503C76.8316 30.8755 77.1692 30.749 77.5093 30.6586C77.767 30.5941 78.0402 30.5115 78.3004 30.4263C78.5607 30.3411 78.8287 30.2714 79.0864 30.1682C79.4935 30.0107 79.9084 29.8765 80.3052 29.6932L80.9082 29.4351L81.5009 29.1563C81.8134 29.0174 82.1172 28.8597 82.4105 28.6839L82.8537 28.4258L83.2764 28.1367C83.766 27.8088 84.2427 27.4629 84.7091 27.1041L85.4667 26.464L86.1882 25.7876C86.2165 25.7618 86.2423 25.7283 86.2732 25.7205C86.4175 25.6947 86.482 25.5682 86.567 25.4624C86.6901 25.3142 86.8283 25.1792 86.9793 25.0597C86.9882 25.0519 86.9952 25.0422 86.9999 25.0313C86.9999 25.0313 86.9999 25.0029 86.9999 25.0003C86.9838 24.9856 86.9643 24.975 86.9432 24.9694C86.9185 24.9657 86.8933 24.9657 86.8685 24.9694L86.8556 25.0029ZM77.4372 29.8352C77.4037 29.8662 77.3779 29.9126 77.3393 29.923C77.1769 29.9746 77.0094 30.0133 76.8239 30.0598C76.9424 29.9591 77.012 29.9333 77.4346 29.8378C77.4681 29.7861 77.5093 29.7707 77.5635 29.8145H77.6201V29.8326L77.566 29.812L77.4372 29.8352ZM66.7922 30.4754L66.2949 30.3257C66.271 30.343 66.2434 30.3543 66.2142 30.3588C66.1851 30.3633 66.1553 30.3608 66.1274 30.3515C65.9712 30.3085 65.8172 30.2577 65.6661 30.1992C65.6455 30.1992 65.6249 30.225 65.6043 30.225C65.5836 30.225 65.5682 30.2017 65.5501 30.1914C65.568 30.1881 65.5864 30.1881 65.6043 30.1914C65.6272 30.1971 65.649 30.2067 65.6687 30.2198C65.6993 30.2048 65.7326 30.196 65.7666 30.194C65.9135 30.2301 66.0681 30.2482 66.215 30.2818C66.2459 30.2818 66.2717 30.3231 66.2974 30.3437C66.5216 30.3127 66.5371 30.3153 66.7922 30.4754ZM77.0867 30.3334C77.3084 30.2611 77.5351 30.2017 77.7593 30.1398C78.7223 29.8535 79.6628 29.4963 80.5732 29.0711C80.8309 28.9601 81.0757 28.813 81.3308 28.7071C81.5859 28.6013 81.8462 28.4671 82.0858 28.338C82.5144 28.1195 82.9261 27.8693 83.3176 27.5894C83.5624 27.4371 83.7814 27.2487 84.0133 27.0732C84.2453 26.8976 84.4746 26.7324 84.7065 26.5569C84.7537 26.5222 84.7969 26.4823 84.8354 26.4381C84.9913 26.2619 85.1739 26.1112 85.3765 25.9916C85.4097 25.9798 85.4379 25.957 85.4564 25.927C85.5595 25.7179 85.7991 25.6457 85.9202 25.4572C85.9357 25.4314 85.9769 25.4211 86.0104 25.4082C86.0154 25.405 86.0212 25.4032 86.0272 25.4032C86.0331 25.4032 86.0389 25.405 86.0439 25.4082C86.0439 25.4263 86.0722 25.4547 86.0671 25.465C86.0299 25.525 85.9858 25.5805 85.9357 25.6302L85.2296 26.2807L84.4901 26.8899C84.4107 26.9597 84.3244 27.0212 84.2324 27.0732C84.0732 27.1733 83.9232 27.2874 83.784 27.4139C83.6758 27.5017 83.6088 27.6333 83.4593 27.672C83.3397 27.7243 83.2265 27.7902 83.1217 27.8682C83.0036 27.9444 82.8814 28.0142 82.7558 28.0773C82.5361 28.185 82.3272 28.3139 82.1322 28.4619C81.9805 28.5758 81.8106 28.6631 81.6297 28.7201C81.4308 28.7885 81.2385 28.8749 81.0551 28.9782C80.7124 29.1615 80.3465 29.2983 79.996 29.4609C79.9419 29.4841 79.8852 29.497 79.8285 29.5177C79.7596 29.5294 79.6927 29.5511 79.6301 29.5822C79.4121 29.6964 79.1865 29.7956 78.955 29.8791C78.9122 29.8995 78.8672 29.9151 78.821 29.9255C78.508 29.9733 78.1995 30.0467 77.8985 30.145C77.5995 30.2405 77.2955 30.3308 77.0017 30.4521C76.9811 30.4521 76.9553 30.4521 76.8471 30.4521C76.9224 30.404 77.0028 30.3641 77.0867 30.3334ZM85.4358 25.5553L85.0235 25.9425C84.8843 26.069 84.7349 26.2007 84.5931 26.3091C84.4514 26.4175 84.3019 26.5491 84.1551 26.6653L83.6938 26.9906C83.3673 27.2287 83.0284 27.4493 82.6785 27.6514C82.3435 27.8501 81.9982 28.0412 81.6607 28.2373C81.4365 28.3587 81.1943 28.4413 80.9701 28.5548C80.7459 28.6684 80.4959 28.7897 80.2511 28.8904C80.0063 28.9911 79.7693 29.1098 79.5219 29.2028C79.4885 29.2114 79.4565 29.2244 79.4265 29.2415C79.265 29.33 79.0913 29.3943 78.9112 29.4325C78.752 29.4996 78.5884 29.5556 78.4216 29.6003C78.3986 29.6053 78.3749 29.6053 78.352 29.6003C78.3416 29.5984 78.3317 29.5944 78.3229 29.5887C78.314 29.5829 78.3064 29.5755 78.3004 29.5667C78.3004 29.5512 78.3004 29.5151 78.3159 29.5099C78.3863 29.4731 78.4595 29.442 78.5349 29.417C79.0812 29.2183 79.6301 29.0169 80.1609 28.7768C80.4779 28.6504 80.7845 28.4981 81.0938 28.3483C81.403 28.1986 81.707 28.0386 82.0085 27.876C82.2903 27.7505 82.5553 27.5901 82.7971 27.3984C82.9895 27.3175 83.1646 27.2001 83.3124 27.0525C83.4361 26.9544 83.5701 26.8615 83.699 26.7763C83.8435 26.6841 83.9806 26.5805 84.1087 26.4665C84.1462 26.4234 84.1906 26.3867 84.2401 26.3581C84.5054 26.2 84.7453 26.0025 84.9513 25.7722C85.008 25.7128 85.0724 25.6637 85.1317 25.6095L85.4796 25.2972C85.5702 25.2094 85.6769 25.1402 85.7939 25.0933C85.7139 25.2742 85.5909 25.4328 85.4358 25.5553ZM61.2468 28.6529L61.7184 28.862C62.1255 29.0582 62.5249 29.2725 62.9372 29.4532C63.2746 29.6235 63.6254 29.766 63.986 29.8791C64.2256 29.9488 64.4524 30.052 64.6895 30.1372C64.9236 30.2178 65.1619 30.2858 65.4033 30.3411C65.5811 30.3773 65.7537 30.4108 65.9341 30.4418C66.2304 30.4986 66.519 30.5709 66.8077 30.6432C67.0624 30.6952 67.3209 30.7271 67.5807 30.7387C67.6168 30.7387 67.658 30.7387 67.6864 30.7387C67.9598 30.815 68.239 30.8686 68.5213 30.8987C68.7274 30.9555 68.9464 30.9194 69.1552 30.971C69.1784 30.971 69.2041 30.971 69.2247 30.971C69.4437 31.0622 69.6827 31.0942 69.9179 31.0639C70.1547 31.0606 70.3914 31.0726 70.6266 31.1001C70.7915 31.1155 70.9564 31.1001 71.1213 31.1001C71.1664 31.1089 71.2092 31.1264 71.2476 31.1517C71.2476 31.1517 71.2476 31.1801 71.2476 31.1852C71.2299 31.1996 71.2084 31.2086 71.1857 31.2111C70.7477 31.2111 70.307 31.2111 69.8664 31.1723C69.6087 31.1491 69.3665 31.1517 69.1165 31.1207C68.8666 31.0897 68.6888 31.0742 68.4749 31.0407C68.1837 30.9718 67.8885 30.9209 67.591 30.8884C67.5427 30.8852 67.4951 30.8756 67.4493 30.86C66.9932 30.749 66.5371 30.6638 66.0707 30.6019C65.7197 30.5487 65.3746 30.4622 65.0399 30.3437C64.9555 30.3175 64.8694 30.2968 64.7822 30.2818C64.6615 30.2617 64.5419 30.235 64.4241 30.2017C63.9628 30.0081 63.4861 29.8455 63.0377 29.6235C62.8599 29.5383 62.6744 29.4712 62.4966 29.3912C62.1307 29.2389 61.7905 29.0401 61.4426 28.8569C61.3413 28.8198 61.2522 28.7555 61.1849 28.671C61.2053 28.6669 61.226 28.6652 61.2468 28.6658V28.6529ZM59.6002 27.5507C59.7462 27.6806 59.9061 27.794 60.0769 27.8889C60.1453 27.9301 60.2055 27.9834 60.2547 28.0463C60.2547 28.1005 60.2315 28.1109 60.2032 28.0928C59.8015 27.8572 59.4418 27.5562 59.1389 27.2022L59.6002 27.5507ZM71.8454 31.0691C71.912 31.0708 71.9783 31.0777 72.0438 31.0897C72.0438 31.1155 72.0438 31.1336 72.0438 31.1362C71.9638 31.1666 71.8783 31.1802 71.7928 31.1762C71.7072 31.1722 71.6234 31.1507 71.5465 31.113C71.6393 31.1104 71.7449 31.0897 71.8454 31.082V31.0691ZM67.2328 30.5141C67.3268 30.4738 67.4296 30.4586 67.5312 30.4699C67.6328 30.4813 67.7297 30.5187 67.8126 30.5786L67.2328 30.5141ZM60.4248 28.6555C60.332 28.5807 60.2444 28.4981 60.1671 28.4129C60.1671 28.4129 60.1671 28.3767 60.1877 28.3612C60.2083 28.3458 60.2135 28.3612 60.2212 28.3612L60.5588 28.6194C60.5588 28.6194 60.5588 28.64 60.5588 28.6529C60.5124 28.7252 60.4583 28.6942 60.4248 28.6684V28.6555ZM72.0593 30.7748C72.0636 30.7768 72.0674 30.7796 72.0705 30.7832C72.0736 30.7868 72.0759 30.7909 72.0773 30.7955C72.0745 30.8066 72.0682 30.8165 72.0593 30.8239C72.0215 30.8484 71.9784 30.8635 71.9336 30.868C71.8888 30.8724 71.8435 30.8662 71.8016 30.8497C71.897 30.7696 71.9382 30.7593 72.0593 30.7877V30.7748ZM72.3969 30.7748C72.42 30.7786 72.442 30.7874 72.4613 30.8006C72.4276 30.8099 72.3931 30.816 72.3582 30.8187C72.3402 30.8187 72.3221 30.8006 72.2912 30.7877C72.326 30.7803 72.3613 30.776 72.3969 30.7748ZM76.4863 30.114C76.5059 30.1106 76.526 30.1106 76.5456 30.114C76.5791 30.114 76.5817 30.1346 76.5456 30.1475C76.5252 30.1515 76.5042 30.1515 76.4838 30.1475L76.4863 30.114ZM67.6915 32.4372L67.792 32.4553V32.4811H67.7224L67.6915 32.4372ZM83.4928 29.448C83.4928 29.448 83.5134 29.448 83.5237 29.448C83.5096 29.4632 83.4941 29.477 83.4774 29.4893C83.4774 29.4893 83.4567 29.4893 83.4464 29.4893C83.4607 29.4742 83.4762 29.4604 83.4928 29.448ZM68.4105 30.687H68.4723V30.7103H68.4105V30.687ZM81.2174 30.6199L81.1994 30.6354V30.6173L81.2174 30.6199ZM78.0917 29.6648H78.1123L78.0969 29.6803L78.0917 29.6648ZM64.4241 31.6705H64.4447H64.4266H64.4241ZM67.372 32.4449V32.4269L67.3849 32.4449H67.372Z\" fill=\"#2C3033\"/>\n          <path d=\"M88.845 24.5924L89.1825 24.2336C89.1954 24.2336 89.2289 24.2336 89.2521 24.2336C89.2753 24.2336 89.3011 24.2853 89.2856 24.324C89.2702 24.3627 89.2856 24.3498 89.2727 24.3601C89.1476 24.6119 88.9637 24.8297 88.7367 24.9951C88.7161 25.0106 88.6697 24.9951 88.6388 24.9951C88.6079 24.9951 88.6234 24.9435 88.6388 24.928L88.845 24.5924Z\" fill=\"#00FFCC\"/>\n          <path d=\"M88.1317 25.5561H88.0719C88.0719 25.5353 88.0719 25.5092 88.0719 25.4936C88.0719 25.478 88.1577 25.4493 88.1577 25.478C88.1555 25.5058 88.1466 25.5326 88.1317 25.5561Z\" fill=\"#00FFCC\"/>\n          <path d=\"M88.3734 25.2327C88.3906 25.2012 88.4114 25.1717 88.4352 25.1449C88.4352 25.1449 88.4739 25.1449 88.4945 25.1604C88.4821 25.1904 88.4666 25.2189 88.4481 25.2456C88.4481 25.2456 88.4069 25.2378 88.3734 25.2327Z\" fill=\"#00FFCC\"/>\n          <path d=\"M87.4637 25.2094L87.5513 25.181C87.5551 25.1928 87.5551 25.2054 87.5513 25.2171C87.5437 25.2385 87.5304 25.2572 87.5127 25.2713C87.4917 25.2816 87.469 25.2877 87.4457 25.2894L87.4637 25.2094Z\" fill=\"#00FFCC\"/>\n          <path d=\"M87.3015 25.1093L87.2859 25.0494C87.3085 25.0481 87.331 25.0481 87.3536 25.0494C87.3563 25.0596 87.3563 25.0704 87.3536 25.0807L87.3015 25.1093Z\" fill=\"#00FFCC\"/>\n          <path d=\"M88.4507 23.4903C88.4507 23.4903 88.4507 23.4644 88.4507 23.4593C88.4507 23.4541 88.4923 23.4412 88.4975 23.4593C88.4973 23.4649 88.4958 23.4704 88.4931 23.4753C88.4904 23.4802 88.4866 23.4845 88.4819 23.4877C88.4819 23.4877 88.4611 23.4903 88.4507 23.4903Z\" fill=\"#00FFCC\"/>\n          <path d=\"M86.9175 23.9191V23.8748C86.9357 23.8812 86.9526 23.8909 86.9673 23.9035C86.9673 23.9035 86.9673 23.9217 86.9673 23.9322L86.9175 23.9191Z\" fill=\"#00FFCC\"/>\n          <path d=\"M87.2375 24.2494L87.2061 24.2364L87.227 24.2208L87.2375 24.2494Z\" fill=\"#00FFCC\"/>\n          <path d=\"M86.7551 25.1139C86.7551 25.0339 86.7551 25.0339 86.8582 25.0107L86.7526 25.1216L86.7551 25.1139Z\" fill=\"#00FFCC\"/>\n          <path d=\"M87.7035 23.9628L87.714 23.9368L87.7297 23.955L87.7035 23.9628Z\" fill=\"#00FFCC\"/>\n          <path d=\"M14.3093 8.69654L12.6292 10.6764C12.5936 10.7161 12.5438 10.74 12.4907 10.7429C12.4375 10.7458 12.3854 10.7275 12.3457 10.6919C11.2737 9.68596 9.85657 9.13143 8.38769 9.14312C7.75304 9.1223 7.12078 9.23102 6.52939 9.46266C5.93799 9.69431 5.39982 10.044 4.94759 10.4906C3.98728 11.413 3.49596 12.6847 3.47362 14.3058C3.43494 15.6283 3.90232 16.9156 4.78009 17.9042C5.64935 18.8748 6.85876 19.3601 8.40831 19.3601C9.7414 19.3601 11.0831 18.8016 12.4334 17.6848C12.4728 17.6524 12.5232 17.6365 12.5741 17.6403C12.6249 17.6442 12.6724 17.6675 12.7065 17.7054L14.433 19.6621C14.4637 19.6981 14.4805 19.7438 14.4805 19.7912C14.4805 19.8385 14.4637 19.8842 14.433 19.9202C12.6361 21.7616 10.6278 22.6814 8.40831 22.6797C5.77819 22.6797 3.71671 21.8614 2.22385 20.2248C0.744092 18.5971 -0.0515919 16.4602 0.00259674 14.2593C-0.0225377 12.0587 0.79868 9.93275 2.296 8.32225C3.8026 6.68568 5.84004 5.8562 8.40831 5.83383C10.6038 5.83383 12.5674 6.69428 14.299 8.41518C14.3182 8.43295 14.3336 8.45434 14.3445 8.47811C14.3554 8.50188 14.3615 8.52758 14.3625 8.55372C14.3634 8.57986 14.3592 8.60593 14.3501 8.63044C14.341 8.65495 14.3271 8.67741 14.3093 8.69654Z\" fill=\"#2C3033\"/>\n          <path d=\"M22.2976 19.2594V22.1841C22.2971 22.2334 22.2784 22.2807 22.2451 22.317C22.2118 22.3532 22.1662 22.3758 22.1172 22.3803C20.2962 22.5523 18.9021 22.2271 17.935 21.4045C16.9386 20.5578 16.4395 19.2078 16.4378 17.3544V0.196182C16.4378 0.144151 16.4584 0.0942517 16.4952 0.0574604C16.5319 0.0206691 16.5817 0 16.6336 0L19.713 0C19.7649 0 19.8147 0.0206691 19.8515 0.0574604C19.8882 0.0942517 19.9088 0.144151 19.9088 0.196182V17.1892C19.9088 17.8775 20.0806 18.3835 20.4242 18.707C20.7351 18.9961 21.29 19.1149 22.0889 19.0632C22.1156 19.0618 22.1423 19.0659 22.1674 19.0751C22.1925 19.0843 22.2154 19.0985 22.2349 19.1168C22.2544 19.1351 22.27 19.1572 22.2808 19.1817C22.2916 19.2062 22.2973 19.2326 22.2976 19.2594Z\" fill=\"#2C3033\"/>\n          <path d=\"M40.0032 14.2438C40.0283 15.3517 39.8307 16.4532 39.4221 17.4829C39.0135 18.5127 38.4022 19.4495 37.6247 20.2377C36.0322 21.8657 34.0257 22.6797 31.6052 22.6797C30.4827 22.7067 29.3669 22.4976 28.3301 22.0659C27.2932 21.6342 26.3583 20.9894 25.5856 20.1732C24.8068 19.3957 24.1914 18.4698 23.7758 17.45C23.3602 16.4303 23.1528 15.3375 23.166 14.2361C23.1523 13.1404 23.3596 12.0532 23.7753 11.0397C24.1911 10.0262 24.8068 9.10718 25.5856 8.33772C26.3632 7.53007 27.2998 6.893 28.336 6.46687C29.3722 6.04074 30.4854 5.83484 31.6052 5.86221C34.0257 5.86221 36.0322 6.66329 37.6247 8.26545C39.2172 9.8676 40.01 11.8604 40.0032 14.2438ZM28.1239 10.4983C27.1275 11.3708 26.6284 12.6193 26.6267 14.2438C26.625 15.8684 27.124 17.1281 28.1239 18.0229C29.0688 18.8949 30.3102 19.3731 31.5949 19.3601C32.8813 19.3798 34.1253 18.8996 35.0659 18.0203C36.0434 17.1255 36.5321 15.8658 36.5321 14.2413C36.5321 12.6167 36.0434 11.3682 35.0659 10.4957C34.1178 9.63181 32.8764 9.16281 31.5949 9.18441C30.3144 9.17097 29.0755 9.63991 28.1239 10.4983Z\" fill=\"#2C3033\"/>\n          <path d=\"M47.7724 12.5324C49.1732 12.766 50.4982 13.3305 51.6377 14.1793C52.6685 14.9813 53.1838 16.0999 53.1838 17.5351C53.1838 19.2698 52.5602 20.5604 51.313 21.4071C50.0661 22.2506 48.5915 22.6919 47.087 22.672C44.7421 22.672 42.8627 21.6584 41.4488 19.6311C41.4213 19.5921 41.409 19.5442 41.4143 19.4967C41.4195 19.4492 41.4419 19.4052 41.4772 19.373L43.3686 17.5661C43.3881 17.5476 43.4112 17.5333 43.4365 17.5241C43.4618 17.5149 43.4887 17.5111 43.5155 17.5128C43.5424 17.5145 43.5686 17.5217 43.5925 17.5339C43.6164 17.5462 43.6376 17.5633 43.6546 17.5841C44.5857 18.67 45.6903 19.2629 46.9685 19.3627C47.6221 19.4148 48.2778 19.291 48.8676 19.0039C49.1334 18.8919 49.3588 18.7015 49.5139 18.458C49.6691 18.2146 49.7465 17.9296 49.736 17.6409C49.736 16.4914 48.8298 15.76 47.0174 15.4468C43.5438 14.8841 41.7958 13.3232 41.7735 10.7642C41.7508 10.078 41.8999 9.39698 42.2073 8.78331C42.5147 8.16965 42.9707 7.64286 43.5335 7.25101C44.7499 6.37768 46.217 5.92464 47.7132 5.96034C49.549 5.9155 51.3292 6.59395 52.6711 7.84989C52.6898 7.86817 52.7048 7.89004 52.715 7.9142C52.7251 7.93837 52.7304 7.96434 52.7304 7.99057C52.7304 8.0168 52.7251 8.04277 52.715 8.06693C52.7048 8.0911 52.6898 8.11297 52.6711 8.13125L50.9626 9.93819C50.9298 9.9729 50.8853 9.99422 50.8377 9.99803C50.7901 10.0018 50.7428 9.98789 50.7049 9.95885C49.7068 9.23607 48.7285 8.87468 47.7699 8.87468C47.1498 8.86487 46.5385 9.02175 45.9996 9.329C45.7472 9.46555 45.5406 9.67348 45.4054 9.92686C45.2703 10.1802 45.2125 10.4679 45.2394 10.7539C45.2378 10.8906 45.2543 11.0268 45.2883 11.1592C45.3205 11.2855 45.3794 11.4035 45.461 11.5051C45.546 11.6109 45.6208 11.6987 45.6826 11.7632C45.769 11.8541 45.8711 11.9284 45.9841 11.9826L46.3011 12.1556C46.4214 12.2133 46.5487 12.255 46.6799 12.2795C46.8577 12.3234 46.9788 12.3543 47.0432 12.375C47.1076 12.3956 47.239 12.4266 47.4374 12.4679C47.6359 12.5092 47.7518 12.5324 47.7724 12.5324Z\" fill=\"#2C3033\"/>\n          <path d=\"M92.4963 6.12554L95.3128 6.11264C95.365 6.11263 95.4151 6.13322 95.4522 6.16994C95.4894 6.20666 95.5106 6.25655 95.5113 6.30882V7.99702C96.2551 6.60998 97.5435 5.8915 99.3765 5.8416C100.629 5.83914 101.857 6.19756 102.912 6.87413C102.952 6.90193 102.981 6.94331 102.993 6.99071C103.006 7.0381 103.001 7.08835 102.979 7.13227L101.657 9.71361C101.633 9.75749 101.592 9.79041 101.544 9.80573C101.497 9.82106 101.445 9.81766 101.399 9.79622C100.654 9.40346 99.8292 9.18544 98.9874 9.15862C98.1469 9.13265 97.3305 9.4418 96.7172 10.0182C96.389 10.3175 96.1296 10.6846 95.957 11.0942C95.7843 11.5038 95.7026 11.9461 95.7174 12.3905L95.6272 22.1996C95.6272 22.2256 95.6221 22.2513 95.6121 22.2753C95.6021 22.2992 95.5874 22.321 95.569 22.3392C95.5505 22.3575 95.5286 22.3719 95.5045 22.3816C95.4805 22.3913 95.4547 22.3961 95.4288 22.3958L92.352 22.3674C92.2999 22.3667 92.25 22.3454 92.2134 22.3082C92.1767 22.271 92.1562 22.2209 92.1562 22.1686L92.3005 6.32431C92.3005 6.27204 92.321 6.22187 92.3577 6.18467C92.3943 6.14746 92.4442 6.12622 92.4963 6.12554Z\" fill=\"#2C3033\"/>\n          <path d=\"M63.5789 19.7292C65.4625 19.7137 66.9288 19.0142 67.9312 17.6306C67.9601 17.5915 68.0025 17.5646 68.0501 17.555C68.0977 17.5455 68.1472 17.554 68.1889 17.5789L70.4101 18.9806C70.4332 18.9956 70.453 19.0152 70.4682 19.0382C70.4833 19.0612 70.4935 19.0872 70.4981 19.1144C70.5027 19.1416 70.5016 19.1694 70.4949 19.1962C70.4882 19.2229 70.476 19.248 70.4591 19.2697C69.651 20.327 68.6079 21.1809 67.4126 21.7634C66.2173 22.346 64.9029 22.6411 63.5737 22.6255C60.9633 22.6487 58.9689 21.8511 57.5001 20.2068C56.0525 18.6265 55.2641 16.5509 55.2968 14.4065C55.2533 12.257 56.0292 10.1718 57.4666 8.57522C58.9285 6.91283 60.9221 6.05927 63.4474 6.01452C65.7615 5.97322 67.6683 6.696 69.1681 8.18285C70.6678 9.66971 71.428 11.5317 71.4486 13.7689C71.4486 14.2852 71.4692 14.8505 71.4486 15.4416C71.4486 15.4932 71.4283 15.5427 71.3921 15.5794C71.356 15.6161 71.3068 15.6371 71.2553 15.6378C70.2246 15.6378 58.6906 15.7101 58.6906 15.7101C58.983 16.8063 59.5705 17.801 60.3887 18.5857C61.2607 19.3721 62.4068 19.7829 63.5789 19.7292ZM58.907 12.8499C58.9002 12.8841 58.9026 12.9194 58.9137 12.9524C58.9249 12.9854 58.9445 13.0148 58.9706 13.0378C58.9967 13.0608 59.0283 13.0766 59.0624 13.0835C59.0965 13.0903 59.1317 13.0881 59.1647 13.0771C60.5648 12.5089 62.0581 12.2061 63.5686 12.1839C64.9838 12.1504 66.3898 12.4215 67.6915 12.979C67.7248 12.9911 67.7607 12.9941 67.7954 12.9874C67.8302 12.9808 67.8625 12.9648 67.8889 12.9413C67.9153 12.9177 67.9349 12.8874 67.9455 12.8536C67.9561 12.8198 67.9574 12.7837 67.9492 12.7493C67.6761 11.6677 67.1762 10.5525 66.483 9.94849C65.6697 9.25282 64.6273 8.88481 63.5582 8.91595C62.2209 8.94951 61.0845 9.31348 60.3063 10.0053C59.6285 10.6248 59.157 11.7554 58.907 12.8499Z\" fill=\"#2C3033\"/>\n          <path d=\"M84.186 18.5857C85.0019 17.7993 85.5866 16.8038 85.8764 15.7075C85.8764 15.7075 74.3347 15.6455 73.3143 15.6352C73.2625 15.6345 73.2131 15.6136 73.1765 15.577C73.1399 15.5403 73.1191 15.4908 73.1184 15.439C73.1184 14.8479 73.1184 14.2903 73.1313 13.7663C73.1519 11.5291 73.9121 9.66711 75.4118 8.18026C76.9115 6.6934 78.8184 5.97063 81.1324 6.01193C83.6578 6.05495 85.6505 6.90852 87.1107 8.57262C88.5471 10.1722 89.3195 12.2607 89.2702 14.4116C89.3052 16.5565 88.5165 18.6329 87.0669 20.2119C85.5981 21.8485 83.6062 22.6539 80.9933 22.6306C79.6641 22.6463 78.3497 22.3511 77.1544 21.7686C75.9591 21.186 74.916 20.3322 74.1079 19.2749C74.0907 19.2531 74.0784 19.2279 74.0716 19.201C74.0649 19.1741 74.0639 19.146 74.0688 19.1187C74.0736 19.0914 74.0842 19.0654 74.0999 19.0425C74.1155 19.0196 74.1358 19.0002 74.1595 18.9858L76.3781 17.5841C76.42 17.5597 76.4693 17.5515 76.5167 17.5611C76.5642 17.5706 76.6065 17.5971 76.6358 17.6357C77.6382 19.0193 79.1019 19.7189 80.9856 19.7344C82.1617 19.7883 83.3117 19.3755 84.186 18.5857ZM84.2479 10.0027C83.4748 9.31089 82.3307 8.94692 80.9933 8.91336C79.925 8.88212 78.8834 9.25018 78.0711 9.9459C77.3651 10.5499 76.8755 11.6651 76.6049 12.7467C76.5967 12.7811 76.598 12.8172 76.6086 12.851C76.6192 12.8848 76.6388 12.9151 76.6652 12.9387C76.6916 12.9622 76.7239 12.9782 76.7587 12.9848C76.7935 12.9915 76.8293 12.9886 76.8626 12.9764C78.164 12.4181 79.5702 12.147 80.9856 12.1813C82.496 12.2035 83.9893 12.5063 85.3894 13.0745C85.4224 13.0864 85.458 13.0893 85.4924 13.0827C85.5269 13.0762 85.559 13.0605 85.5853 13.0372C85.6116 13.014 85.6313 12.9842 85.6421 12.9508C85.653 12.9173 85.6547 12.8816 85.6471 12.8473C85.4152 11.7554 84.9436 10.6248 84.2479 10.0053V10.0027Z\" fill=\"#2C3033\"/>\n        </svg>\n        <Info />\n        <HeaderSchedule name={ name } />\n        <FormToSchedule />\n        <Schedule />\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getInfoWorker: (payload) => dispatch(getInforWorkerAction(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(HomePage);\n\n","import React, { Component } from 'react'\nimport HomePage from './pages/HomePage'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actions } from \"../actions\";\n\n\nconst INITIAL_STATE = {\n  schedule: '',\n}\n\nfunction addWorkReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case actions.ADD_WORK:\n      return {...state, schedule: [...state.schedule, action.payload] };\n    default:\n      return state;\n  }\n}\n\nexport default addWorkReducer;","import { actions } from \"../actions\";\n\n\nconst INITIAL_STATE = {\n  worker: '',\n}\n\nfunction workerReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case actions.REQUEST_INFO_WORKER:\n      return {...state, worker: action.payload };\n    default:\n      return state;  \n  }\n}\n\nexport default workerReducer;","import { combineReducers } from 'redux';\nimport addWorkReducer from './addWorkReducer';\nimport workerReducer from './workerReducer';\n\nconst rootReducer = combineReducers({\n  workerData: workerReducer,\n  schedule: addWorkReducer, \n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst Store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)));\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport Store from './components/redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = { Store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}